# This Taskfile provides commands for managing the project.
#
# This project uses Task (https://taskfile.dev) for task automation.
# Uses uv (https://github.com/astral-sh/uv) for project management
#
# Python Version Management:
# - Supported Python versions are listed in .python-versions
# - Default Python version is set in .python-version
# - Each Python version has its own virtual environment (.venv-X.Y)
# - .venv symlink points to the default version's environment
# - Tasks should always use .venv/bin/python except when managing environments
# - Available Commands:
# 1. Add a version:    task python:add -- 3.11
# 2. List versions:    task python:list-installed
# 3. Set default:      task python:set-default -- 3.11
# 4. Remove version:   task python:remove -- 3.11
#
# Package Management:
# - task add: Install packages using uv add
# - task remove: Remove packages using uv remove
#
# Virtual Environment Management:
# - task setup: Set up development environment
# - task venvs:update: Update all virtual environments
# - task venvs:update:dev: Update only development environment
# - task venvs:upgrade: Upgrade all dependencies to latest versions
# - task venvs:clean: Remove all virtual environments
#
# Testing:
# - task test: Run tests using development Python version
# - task test:coverage: Run tests with coverage report
# - task test:pythons: Run tests across all supported Python versions
#
# Code Quality:
# - task lint: Run all code quality checks
# - task lint:ruff: Run ruff linter
# - task lint:mypy: Run mypy type checker
# - task lint:deadcode: Check for unused code
# - task format: Format code with ruff
# - task metrics: Run code quality metrics
# - task spell: Run codespell checks
#
# Documentation:
# - task docs: Serve documentation locally
# - task docs:build: Build documentation
#
# Build and Publish:
# - task build: Build package distribution (wheel and sdist)
# - task publish:pypi: Publish to PyPI
# - task publish:test-pypi: Publish to Test PyPI
#
# CI/CD:
# - task ci: Run all CI checks (lint, test, coverage, docs, build)

version: '3'

vars:
  # Minimum required test coverage percentage
  COVERAGE_MIN: 80
  # Primary development Python version from .python-version
  DEV_VERSION:
    sh: cat .python-version
  # Space-separated list of supported Python versions from .python-versions
  PYTHON_VERSIONS:
    sh: cat .python-versions | tr '\n' ' ' | sed 's/ $//'  # Convert newlines to spaces and trim trailing space
  # Path to development virtual environment
  DEV_VENV: .venv-{{.DEV_VERSION}}

tasks:
  # Internal tasks
  check:venv:
    internal: true
    silent: true
    status:
      - test -d .venv
    cmds:
      - task: setup

  # Core tasks
  default:
    desc: Show available tasks
    summary: |
      Show available tasks

      Examples:
        # List all available tasks
        task
        # or
        task --list-all --sort alphanumeric
    cmds:
      - task --list-all --sort alphanumeric
    silent: true

  # CI/CD
  ci:
    desc: Run all CI checks (lint, test, coverage, docs, build)
    summary: |
      Run all CI checks (lint, test, coverage, docs, build)

      Examples:
        # Run all CI checks
        task ci
    deps:
      - check:venv
    cmds:
      - task: lint
      - task: metrics
      - task: test:coverage
      - task: docs:build
      - task: build

  # Environment management
  setup:
    internal: true
    desc: Set up development environment
    summary: |
      Set up development environment (creates virtual environments for all Python versions)

      Examples:
        # Set up all environments
        task setup
    silent: true
    cmds:
      - uv python install {{.PYTHON_VERSIONS}}
      - for: { var: PYTHON_VERSIONS }
        task: setup:venv
        vars:
          VERSION: "{{.ITEM}}"
      - task: python:list-installed
      - task: python:update-venv
      - pre-commit install

  python:list-installed:
    desc: List installed Python versions
    summary: |
      List installed Python versions

      Examples:
        # List installed Python versions
        task python:list-installed

        # Output example:
        3.10
        3.11
        3.12 (default)
        3.13
        3.8
    silent: true
    cmds:
      - |
        echo "Installed Python versions:"
        DEV_VER=$(cat .python-version)
        uv python list --only-installed | grep -o '.*/python[0-9]\+\.[0-9]\+' | \
        sed -E 's|.*/python([0-9]+\.[0-9]+).*|\1|' | sort -u | \
        while read ver; do \
          if [ "$ver" = "$DEV_VER" ]; then
            echo "$ver (default)"
          else
            echo "$ver"
          fi
        done

  python:update-venv:
    internal: true
    desc: Update virtual environment symlink to match .python-version
    summary: |
      Internal task to update the .venv symlink to point to the current default Python version's environment.
      This task is called by other tasks that modify the default Python version.
    silent: true
    cmds:
      - |
        VER=$(cat .python-version)
        rm -f .venv
        ln -s .venv-$VER .venv
        echo "Updated .venv to use Python $VER"

  python:set-default:
    desc: Set the default Python version
    summary: |
      Set the default Python version in .python-version

      Examples:
        # Set Python 3.11 as default
        task python:set-default -- 3.11

        # This will:
        # 1. Check if the version is installed
        # 2. Check if the version is in .python-versions
        # 3. Update .python-version
        # 4. Update the .venv symlink
    silent: true
    cmds:
      - |
        VER="{{.CLI_ARGS}}"
        if ! uv python list --only-installed | grep -q "/python$VER"; then
          echo "Error: Python $VER is not installed"
          exit 1
        fi
        if ! grep -q "^$VER$" .python-versions; then
          echo "Error: Python $VER is not in .python-versions"
          exit 1
        fi
        echo "$VER" > .python-version
        echo "Set Python $VER as default"
      - task: python:update-venv

  python:add:
    desc: Add a Python version to .python-versions
    summary: |
      Add Python versions using uv python install (https://docs.astral.sh/uv/commands/python/)

      Examples:
        # Add Python 3.11
        task python:add -- 3.11

        # Add multiple versions
        task python:add -- 3.11 3.12 3.13
    silent: true
    cmds:
      - |
        for ver in {{.CLI_ARGS}}; do
          if ! grep -q "^$ver$" .python-versions; then
            echo "Adding Python $ver..."
            echo "$ver" >> .python-versions
            sort -u -o .python-versions .python-versions
            uv python install "$ver"
          else
            echo "Python $ver already in .python-versions"
          fi
        done
      - task: venvs:update

  python:remove:
    desc: Remove Python versions and their environments
    summary: |
      Remove Python versions from .python-versions and delete their virtual environments

      Examples:
        # Remove Python 3.11
        task python:remove -- 3.11

        # Remove multiple versions
        task python:remove -- 3.11 3.12

        # This will:
        # 1. Remove versions from .python-versions
        # 2. Delete their .venv-X.Y directories
        # 3. If removing the default version, prompt to set a new one
    silent: true
    cmds:
      - |
        DEV_VER=$(cat .python-version)
        NEED_NEW_DEFAULT=false

        for ver in {{.CLI_ARGS}}; do
          if grep -q "^$ver$" .python-versions; then
            echo "Removing Python $ver..."
            sed -i "/^$ver$/d" .python-versions
            if [ -d ".venv-$ver" ]; then
              rm -rf ".venv-$ver"
              echo "Removed .venv-$ver directory"
            fi
            if [ "$ver" = "$DEV_VER" ]; then
              NEED_NEW_DEFAULT=true
            fi
          else
            echo "Python $ver not in .python-versions"
          fi
        done

        if [ "$NEED_NEW_DEFAULT" = "true" ]; then
          NEW_VER=$(head -n 1 .python-versions)
          if [ -n "$NEW_VER" ]; then
            echo "$NEW_VER" > .python-version
            echo "Set Python $NEW_VER as new default version"
            task python:update-venv
          else
            echo "Error: No Python versions left in .python-versions"
            exit 1
          fi
        fi

  setup:venv:
    internal: true
    silent: true
    desc: Create a virtual environment using uv venv
    summary: |
      Create a virtual environment using uv venv (https://docs.astral.sh/uv/commands/venv/)
    cmds:
      - echo "Setting up Python {{.VERSION}} environment"
      - uv venv --python-preference managed --python {{.VERSION}} .venv-{{.VERSION}}
      - uv pip install --python .venv-{{.VERSION}}/bin/python -e ".[dev,docs]"

  venvs:update:
    desc: Update virtual environment with latest dependencies
    summary: |
      Update virtual environment with latest dependencies using uv pip install (https://docs.astral.sh/uv/commands/pip/)

      Examples:
        # Update all Python environments
        task venvs:update
    silent: true
    cmds:
      - for: { var: PYTHON_VERSIONS }
        task: venvs:update:internal
        vars:
          VERSION: "{{.ITEM}}"
      - pre-commit install

  venvs:update:internal:
    internal: true
    silent: true
    deps:
      - check:venv
    cmds:
      - echo "Updating Python {{.VERSION}} environment"
      - uv pip install --python .venv-{{.VERSION}}/bin/python --upgrade pip
      - uv pip install --python .venv-{{.VERSION}}/bin/python --upgrade -e ".[dev,docs]"

  venvs:update:dev:
    desc: Update development environment with latest dependencies
    summary: |
      Update development environment with latest dependencies

      Examples:
        # Update only the development environment (Python {{.DEV_VERSION}})
        task venvs:update:dev
    silent: true
    cmds:
      - task: venvs:update:internal
        vars:
          VERSION: "{{.DEV_VERSION}}"

  venvs:upgrade:
    desc: Upgrade all dependencies to latest versions
    summary: |
      Upgrade all dependencies using uv lock (https://docs.astral.sh/uv/commands/lock/)

      Examples:
        # Upgrade all dependencies
        task venvs:upgrade

        # This will:
        # 1. Upgrade dependency versions in requirements.txt
        # 2. Update all Python environments with new versions
    silent: true
    cmds:
      - uv lock --upgrade
      - task: venvs:update

  add:
    desc: Install a package using uv add
    summary: |
      Install a package using uv add (https://docs.astral.sh/uv/commands/add/)

      Examples:
        # Install a single package
        task add -- requests

        # Install a specific version
        task add -- requests==2.31.0

        # Install with options
        task add -- --upgrade requests

        # Install multiple packages
        task add -- requests pytest black

        # The double dash (--) is needed to separate the task's arguments from the package specifications.
    deps:
      - check:venv
    cmds:
      - uv add --python .venv/bin/python {{.CLI_ARGS}}
      - task: venvs:update

  remove:
    desc: Remove a package using uv remove
    summary: |
      Remove a package using uv remove (https://docs.astral.sh/uv/commands/remove/)

      Examples:
        # Remove a single package
        task remove -- requests

        # Remove multiple packages
        task remove -- requests pytest black

        # The double dash (--) is needed to separate the task's arguments from the package specifications.
    deps:
      - check:venv
    cmds:
      - uv remove --python .venv/bin/python {{.CLI_ARGS}}
      - task: venvs:update

  clean:
    desc: Clean build artifacts and caches
    summary: |
      Clean build artifacts and caches

      Examples:
        # Remove all build artifacts and caches
        task clean
    silent: true
    cmds:
      - rm -rf build dist .eggs *.egg-info
      - find . -type d -name __pycache__ -exec rm -rf {} +
      - find . -type d -name .pytest_cache -exec rm -rf {} +
      - find . -type d -name .ruff_cache -exec rm -rf {} +
      - find . -type d -name .mypy_cache -exec rm -rf {} +
      - find . -type f -name .coverage -delete
      - find . -type d -name htmlcov -exec rm -rf {} +
      - task: venvs:clean

  venvs:clean:
    desc: Remove all virtual environments
    summary: |
      Remove all virtual environments

      Examples:
        # Remove all virtual environments
        task clean:venvs
    silent: true
    cmds:
      - rm -rf .venv
      - for: { var: PYTHON_VERSIONS }
        cmd: rm -rf .venv-{{.ITEM}}

  # Testing
  test:
    desc: Run tests
    summary: |
      Run tests

      Examples:
        # Run all tests
        task test

        # Run specific test file
        task test -- tests/test_specific.py

        # Run tests with pytest options
        task test -- -v -k "test_function"

        # The double dash (--) is needed to separate the task's arguments from the pytest options.
    deps:
      - check:venv
    cmds:
      - uv run --python .venv/bin/python pytest {{.CLI_ARGS}}

  test:coverage:
    desc: Run tests with coverage report
    summary: |
      Run tests with coverage report (minimum required coverage: 80%)

      Examples:
        # Run tests with coverage report
        task test:coverage

        # This will:
        # - Run tests with coverage tracking
        # - Show missing lines in coverage report
        # - Fail if coverage is below 80%
    silent: true
    deps:
      - check:venv
    cmds:
      - uv run --python .venv/bin/python pytest -vv --cov --cov-report=term-missing
      - .venv/bin/python -c "import sys; exit(1) if float('{{.COVERAGE_MIN}}') > float('$(uv run --python .venv/bin/python coverage report | grep TOTAL | awk '{print $4}' | tr -d '%')') else exit(0)"

  test:pythons:
    desc: Run tests and checks across all Python versions
    summary: |
      Run tests and checks (ruff, mypy, pytest) across all Python versions

      Examples:
        # Test across all Python versions
        task test:pythons
    deps:
      - check:venv
    cmds:
      - for: { var: PYTHON_VERSIONS }
        task: test:python
        vars:
          VERSION: "{{.ITEM}}"

  test:python:
    internal: true
    deps:
      - check:venv
    cmds:
      - echo "Testing with Python {{.VERSION}}"
      # Run tests
      - uv run --python .venv/bin/python ruff check src tests
      - uv run --python .venv/bin/python mypy src tests
      - uv run --python .venv/bin/python pytest -v

  # Code quality
  pre-commit:
    desc: Run pre-commit hooks
    summary: |
      Run pre-commit hooks

      Examples:
        # Run all pre-commit hooks
        task pre-commit
    deps:
      - check:venv
    cmds:
      - uv run --python .venv/bin/python pre-commit run --all-files

  lint:
    desc: Run all code quality checks
    summary: |
      Run all code quality checks (pre-commit, ruff, mypy, spell check, dead code)

      Examples:
        # Run all linting checks
        task lint

        # This is equivalent to running:
        # - task pre-commit
        # - task lint:ruff
        # - task lint:mypy
        # - task spell
        # - task deadcode
    silent: true
    deps:
      - check:venv
    cmds:
      - task: pre-commit
      - task: lint:ruff
      - task: lint:mypy
      - task: spell
      - task: lint:deadcode

  lint:deadcode:
    desc: Check for unused code in the project
    summary: |
      Check for unused code in the project

      Examples:
        # Check for unused code (dry run)
        task lint:deadcode

        # This checks for:
        # - Unused functions and classes
        # - Unused imports
        # - Dead code blocks
    deps:
      - check:venv
    cmds:
      - uv run --python .venv/bin/python deadcode --dry src

  lint:ruff:
    desc: Run ruff linter on source and test files
    summary: |
      Run ruff linter on source and test files

      Examples:
        # Run ruff linter
        task lint:ruff

        # Checks for:
        # - Style violations (PEP 8)
        # - Common programming errors
        # - Code complexity
    deps:
      - check:venv
    cmds:
      - uv run --python .venv/bin/python ruff check src tests

  lint:mypy:
    desc: Run mypy type checker on source and test files
    summary: |
      Run mypy type checker on source and test files

      Examples:
        # Run type checking
        task lint:mypy

        # Verifies:
        # - Type annotations
        # - Type consistency
        # - Type safety
    deps:
      - check:venv
    cmds:
      - uv run --python .venv/bin/python mypy src tests

  spell:
    desc: Check spelling in code and documentation files
    summary: |
      Check spelling in code and documentation files

      Examples:
        # Check spelling
        task spell

        # Checks spelling in:
        # - Python source files
        # - Test files
        # - Documentation files
        # - README.md
    deps:
      - check:venv
    cmds:
      - uv run --python .venv/bin/python codespell src tests docs README.md

  format:
    desc: Format code with ruff formatter
    summary: |
      Format code with ruff formatter

      Examples:
        # Format all code
        task format

        # This will:
        # - Fix code style issues
        # - Sort imports
        # - Apply consistent formatting
        # - Format both source and test files
    deps:
      - check:venv
    cmds:
      - uv run --python .venv/bin/python ruff format src tests

  metrics:
    desc: Run code quality metrics using radon
    summary: |
      Run code quality metrics using radon

      Examples:
        # Check code complexity
        task metrics

        # This calculates:
        # - Cyclomatic complexity
        # - Maintainability index
        # - Raw metrics (LOC, SLOC)
        #
        # Note: Code should maintain cyclomatic complexity below 5
    deps:
      - check:venv
    cmds:
      - uv run --python .venv/bin/python radon cc src

  # Documentation
  docs:
    desc: Build and serve documentation locally
    summary: |
      Build and serve documentation locally (builds docs and starts server at http://127.0.0.1:8000)

      Examples:
        # Build docs and start server
        task docs

        # After starting, visit http://127.0.0.1:8000 in your browser
        # Press Ctrl+C to stop the server
    deps:
      - check:venv
    cmds:
      - task: docs:build
      - uv run --python .venv/bin/python mkdocs serve

  docs:build:
    desc: Build documentation to site/ directory
    summary: |
      Build documentation to site/ directory

      Examples:
        # Build documentation
        task docs:build

        # The built documentation will be in the site/ directory
    deps:
      - check:venv
    cmds:
      - uv run --python .venv/bin/python mkdocs build

  docs:serve:
    desc: Serve documentation without rebuilding
    summary: |
      Serve documentation without rebuilding (starts server at http://127.0.0.1:8000)

      Examples:
        # Start documentation server
        task docs:serve

        # After starting, visit http://127.0.0.1:8000 in your browser
        # Press Ctrl+C to stop the server

        # Note: Use task docs if you want to build and serve in one step
    deps:
      - check:venv
    cmds:
      - uv run --python .venv/bin/python mkdocs serve

  # Building

  build:wheel:
    desc: Build wheel distribution
    summary: |
      Build wheel distribution

      Examples:
        # Build wheel package
        task build:wheel
    deps:
      - check:venv
    cmds:
      - uv run .venv/bin/python -m build --wheel

  build:sdist:
    desc: Build source distribution
    summary: |
      Build source distribution

      Examples:
        # Build source package
        task build:sdist
    deps:
      - check:venv
    cmds:
      - uv run .venv/bin/python -m build --sdist

  build:
    desc: Build package distribution
    summary: |
      Build package distribution (both wheel and sdist)

      Examples:
        # Build all distribution formats
        task build
    deps:
      - check:venv
    cmds:
      - rm -rf dist/
      - task: build:wheel
      - task: build:sdist

  # Version management
  version:
    desc: Display current version from pyproject.toml
    summary: |
      Shows the current version from pyproject.toml

      Example:
        task version
    silent: true
    deps:
      - check:venv
    cmds:
      - |
        VERSION=$(uv run .venv/bin/python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "Current version: $VERSION"

  version:bump:
    desc: Bump patch version number
    summary: |
      Increment the patch version number (e.g., 1.2.3 -> 1.2.4)

      Examples:
        # Bump patch version
        task version:bump
    silent: true
    deps:
      - check:venv
    cmds:
      - uv run .venv/bin/version_bumper bump patch

  version:tag:
    desc: Create and push a git tag using version from pyproject.toml
    summary: |
      Creates a git tag using the version from pyproject.toml and pushes it to origin.
      The tag will be in the format v{version} (e.g., v1.2.3).

      Example:
        task version:tag
    silent: true
    deps:
      - check:venv
    cmds:
      - |
        VERSION=$(uv run .venv/bin/python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "Creating and pushing tag v$VERSION"
        git tag "v$VERSION"
        git push origin "v$VERSION"

# Publishing
  publish:test-pypi:
    desc: Publish to the test.pypi.org server
    summary: |
      Publish to the test.pypi.org server
      Requires ~/.pypirc with test.pypi.org credentials and 0600 permissions
      See https://packaging.python.org/en/latest/specifications/pypirc/

      Examples:
        # Publish to TestPyPI
        task publish-test-pypi
    deps:
      - build
    preconditions:
      - sh: test -f ~/.pypirc
        msg: "~/.pypirc file not found"
      - sh: test -s ~/.pypirc
        msg: "~/.pypirc is empty"
      - sh: '[[ $(stat -c %a ~/.pypirc) = "600" ]]'
        msg: "~/.pypirc must have 0600 permissions"
    cmds:
      - uv run --python .venv/bin/python twine upload --repository testpypi dist/*

  publish:pypi:
    desc: Publish to the pypi.org server
    summary: |
      Publish to the pypi.org server
      Requires ~/.pypirc with pypi.org credentials and 0600 permissions
      See https://packaging.python.org/en/latest/specifications/pypirc/

      Examples:
        # Publish to PyPI
        task publish-pypi
    deps:
      - build
    preconditions:
      - sh: test -f ~/.pypirc
        msg: "~/.pypirc file not found"
      - sh: test -s ~/.pypirc
        msg: "~/.pypirc is empty"
      - sh: '[[ $(stat -c %a ~/.pypirc) = "600" ]]'
        msg: "~/.pypirc must have 0600 permissions"
    cmds:
      - uv run --python .venv/bin/python twine upload dist/*
