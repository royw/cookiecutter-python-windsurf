[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
requires-python = ">={{ cookiecutter.python_version }}"
license = "MIT"
authors = [
    { name = "{{ cookiecutter.full_name }}", email = "" },
]
maintainers = [
    { name = "{{ cookiecutter.full_name }}", email = "" },
]

keywords = [
{% for keyword in cookiecutter.keywords %}    "{{ keyword }}"{% if not loop.last %},{% endif %}
{% endfor %}]

scripts = {'{{ cookiecutter.project_slug }}' = "{{ cookiecutter.project_slug }}.__main__:main"}

dependencies = []

[project.optional-dependencies]
dev = [
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.5.0",
    "uv>=0.1.0",
    "build>=1.0.3",
    "twine>=4.0.2",
    "deadcode>=1.0.0",
    "codespell>=2.2.6",
    "radon>=6.0.1",
    "version-bumper>=0.1.0",
    "tomli>=2.0.1",
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.14",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.1",
]

[tool.coverage.run]
source_pkgs = ["{{ cookiecutter.project_slug }}"]
branch = true
parallel = true
omit = [
  "{{ cookiecutter.project_slug }}/__init__.py",
]

[tool.coverage.paths]
source = ["{{ cookiecutter.project_slug }}"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.codespell]
skip = '.git,*.pyc,*.pdf,*.svg'
quiet-level = 3
ignore-words-list = 'xyzzy'

[tool.hatch.build]
packages = ["src/{{ cookiecutter.package_name }}"]

[tool.mypy]
python_version = "{{ cookiecutter.python_version }}"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
#  "-n", "auto",
#  "-n", "auto",
  "-ra",
  "--showlocals",
  "--strict-markers",
  "--strict-config",
#  "-q",
  "--cov={{ cookiecutter.package_name }}",
  "--cov-report=term-missing"
]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
pythonpath = "src"
testpaths = [
    "tests"
]

[tool.ruff]
target-version = "py{{ cookiecutter.python_version.replace('.', '') }}"
src = ["src", "tests"]
extend-exclude = ["dist", "docs", "metrics", "scripts", "site", ".venv"]
line-length = 119
fix = true
show-fixes = true

[tool.ruff.lint]
# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that
# overlap with the use of a formatter, like Black, but we can override this behavior by
# explicitly adding the rule.
# https://docs.astral.sh/ruff/rules
# extend-select = ["E501"]
extend-select = [
  #"F",        # pyflakes
  #"E",        # pycodestyle Error
  #"W",        # pycodestyle Warning
  "C901",     # mccade
  "I",        # isort
  "N",        # pep8-naming
  #"D",        # pydocstyle
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  #"ANN",      # flake8-annotations
  #"ASYNC",    # flake8-async
  #"S",        # flake8-bandit
  #"BLE",      # flake8-blind-except
  #"FBT",      # flake8-boolean-trap
  "B",        # flake8-bugbear
  #"A",        # flake8-builtins
  #"COM",      # flake8-commas
  #"CPY",      # flake8-copyright
  "C4",       # flake8-comprehensions
  #"DTZ",      # flake8-datetimez
  #"T10",      # flake8-debugger
  #"DJ",       # flake8-django
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  #"FA",       # flake8-future-annotations
  #"ICS",      # flake8-implicit-str-concat
  "ICN",      # flake8-import-conventions
  "LOG",      # flake8-logging (added 7/4/24)
  "G",        # flake8-logging-format
  "INP",      # flake8-no-pep420 (added 7/4/24)
  "PIE",      # flake8-pie
  #"T20",      # flake8-print
  #"PYI",      # flake8-pyi
  "PT",       # flake8-pytest-style
  #"Q",        # flake8-quotes
  #"RSE",      # flake8-raise
  "RET",      # flake8-return
  #"SLF",      # flake8-self
  #"SLOT",     # flake8-slot
  "SIM",      # flake8-simplify
  #"TID",      # flake8-tidy
  #"TCH",      # flake8-type-checking
  #"INT",      # flake8-gettest
  "ARG",      # flake8-unused-arguments
  "PTH",      # flake8-use-pathlib
  #"TD",       # flake8-todos
  #"FIX",      # flake8-fixme
  #"ERA",      # eradicate
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PL",       # pylint
  #"TRY",      # tryceratops
  #"FLY",      # flynt
  "NPY",      # NumPy specific rules
  #"AIR",      # airflow
  #"PERF",     # perflint
  #"FURB",     # refurb
  "RUF",      # Ruff-specific
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "S101",     # pytest uses "assert" so allow it
  "N817",     # CamelCase imports
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["scientific python._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"src/{{ cookiecutter.package_name }}/cli.py" = ["T201"]  # Allow print statements in CLI

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
